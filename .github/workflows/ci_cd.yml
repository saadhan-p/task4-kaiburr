# .github/workflows/ci-cd.yml
name: Java Backend CI/CD to Kubernetes

# Triggers the workflow on every push to the main branch
on:
  push:
    branches:
      - master # Using 'master' based on your previous successful push branch
  workflow_dispatch:

env:
  # --- Variables Confirmed by Your Deployment ---
  DOCKER_REPO: saadhanp/task-backend       # Your Docker Hub repository
  K8S_DEPLOYMENT: task1-app                 # Kubernetes Deployment Name
  K8S_CONTAINER_NAME: task1-container       # Container Name confirmed from K8s (task1-container)
  TAG: ${{ github.sha }}                   # Unique Git commit SHA for tagging

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # -----------------------------------------------------
      # 1. CD: Docker Login (Uses DOCKER_USERNAME/DOCKER_PASSWORD secrets)
      # -----------------------------------------------------
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      # -----------------------------------------------------
      # 2. CD: Build and Push Image (Dockerfile handles Java build)
      # -----------------------------------------------------
      - name: Build and Push Docker Image
        # This step executes the multi-stage Dockerfile (including the internal mvn build)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          # Tags the image with the unique commit SHA
          tags: ${{ env.DOCKER_REPO }}:${{ env.TAG }}
          file: ./Dockerfile 

      # -----------------------------------------------------
      # 3. CD: Deploy to Kubernetes Cluster (Uses KUBE_CONFIG_DATA secret)
      # -----------------------------------------------------
      - name: Setup Kubeconfig
        # Decodes the KUBE_CONFIG_DATA secret to authenticate kubectl
        uses: azure/k8s-set-context@v4
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_DATA }} 

      - name: Deploy New Image to K8s
        run: |
          echo "Updating deployment ${{ env.K8S_DEPLOYMENT }} to image ${{ env.DOCKER_REPO }}:${{ env.TAG }}"
          
          # Sets the new image tag and forces a rolling update
          kubectl set image deployment/${{ env.K8S_DEPLOYMENT }} ${{ env.K8S_CONTAINER_NAME }}=${{ env.DOCKER_REPO }}:${{ env.TAG }}
          
          # Waits for the zero-downtime rollout to finish
          kubectl rollout status deployment/${{ env.K8S_DEPLOYMENT }}
