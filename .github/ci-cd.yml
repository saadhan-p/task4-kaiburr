# .github/workflows/ci-cd.yml
name: Java Backend CI/CD to Kubernetes

# 1. Trigger the workflow on pushes to the 'main' branch or manually
on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  # --- Configuration Variables ---
  DOCKER_REPO: saadhanp/task-backend       # Your Docker Hub path
  K8S_DEPLOYMENT: task1-app                 # Name of the Kubernetes Deployment
  K8S_CONTAINER_NAME: task1-container       # Name of the container inside the Deployment YAML
  TAG: ${{ github.sha }}                   # Uses the unique commit hash for tagging

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # -----------------------------------------------------
      # 2. Continuous Delivery (CD): Dockerize and Push Image
      # (The 'Dockerfile' handles the Java compilation internally)
      # -----------------------------------------------------
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          # Uses DOCKER_USERNAME and DOCKER_PASSWORD secrets
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Build and Push Docker Image
        # This step executes the multi-stage Dockerfile (including the internal mvn build)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_REPO }}:${{ env.TAG }}
          file: ./Dockerfile 

      # -----------------------------------------------------
      # 3. Continuous Deployment (CD): Deploy to Kubernetes
      # -----------------------------------------------------
      - name: Setup Kubeconfig
        # Uses KUBE_CONFIG_DATA secret to authenticate kubectl
        uses: azure/k8s-set-context@v4
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_DATA }} 

      - name: Deploy New Image to K8s
        run: |
          echo "Updating deployment ${{ env.K8S_DEPLOYMENT }} to image ${{ env.DOCKER_REPO }}:${{ env.TAG }}"
          
          # Force a Rolling Update with the unique tag
          kubectl set image deployment/${{ env.K8S_DEPLOYMENT }} ${{ env.K8S_CONTAINER_NAME }}=${{ env.DOCKER_REPO }}:${{ env.TAG }}
          
          # Wait for the zero-downtime rollout to finish
          kubectl rollout status deployment/${{ env.K8S_DEPLOYMENT }}