name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Trigger on push to the main branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest  # Use an Ubuntu runner for the job

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Docker Buildx for multi-platform support (optional)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # Store in GitHub Secrets
          password: ${{ secrets.DOCKER_PASSWORD }}  # Store in GitHub Secrets

      # Step 4: Build the Docker image and push it to Docker Hub
      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .  # Current directory (root of the repo)
          push: true  # Push the image to Docker Hub
          tags: saadhanp/task-backend:${{ github.sha }}  # Tag image with the commit SHA
          build-args: |
            MAVEN_ARGS="-DskipTests"  # Skip tests for faster builds (optional)

      # Step 5: Set up kubectl for Kubernetes deployment
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          kubectl-version: 'latest'

      # Step 6: Authenticate kubectl using KUBE_CONFIG_DATA secret
      - name: Set up Kubeconfig
        run: echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 --decode > $HOME/.kube/config

      # Step 7: Deploy the new Docker image to Kubernetes
      - name: Deploy to Kubernetes
        run: |
          kubectl set image deployment/task1-app task1-app=saadhanp/task-backend:${{ github.sha }} --record
          kubectl rollout status deployment/task1-app

      # Step 8: Ensure the deployment is successful
      - name: Check Kubernetes Deployment Rollout Status
        run: kubectl rollout status deployment/task1-app
